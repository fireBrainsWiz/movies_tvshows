"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/colorthief";
exports.ids = ["vendor-chunks/colorthief"];
exports.modules = {

/***/ "(ssr)/./node_modules/colorthief/dist/color-thief.mjs":
/*!******************************************************!*\
  !*** ./node_modules/colorthief/dist/color-thief.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ o)\n/* harmony export */ });\nif (!t) var t = {\n    map: function(t, r) {\n        var n = {};\n        return r ? t.map(function(t, o) {\n            return n.index = o, r.call(n, t);\n        }) : t.slice();\n    },\n    naturalOrder: function(t, r) {\n        return t < r ? -1 : t > r ? 1 : 0;\n    },\n    sum: function(t, r) {\n        var n = {};\n        return t.reduce(r ? function(t, o, e) {\n            return n.index = e, t + r.call(n, o);\n        } : function(t, r) {\n            return t + r;\n        }, 0);\n    },\n    max: function(r, n) {\n        return Math.max.apply(null, n ? t.map(r, n) : r);\n    }\n};\nvar r = function() {\n    var r = 5, n = 8 - r, o = 1e3;\n    function e(t, n, o) {\n        return (t << 2 * r) + (n << r) + o;\n    }\n    function u(t) {\n        var r = [], n = !1;\n        function o() {\n            r.sort(t), n = !0;\n        }\n        return {\n            push: function(t) {\n                r.push(t), n = !1;\n            },\n            peek: function(t) {\n                return n || o(), void 0 === t && (t = r.length - 1), r[t];\n            },\n            pop: function() {\n                return n || o(), r.pop();\n            },\n            size: function() {\n                return r.length;\n            },\n            map: function(t) {\n                return r.map(t);\n            },\n            debug: function() {\n                return n || o(), r;\n            }\n        };\n    }\n    function a(t, r, n, o, e, u, a) {\n        var i1 = this;\n        i1.r1 = t, i1.r2 = r, i1.g1 = n, i1.g2 = o, i1.b1 = e, i1.b2 = u, i1.histo = a;\n    }\n    function i1() {\n        this.vboxes = new u(function(r, n) {\n            return t.naturalOrder(r.vbox.count() * r.vbox.volume(), n.vbox.count() * n.vbox.volume());\n        });\n    }\n    function c(r, n) {\n        if (n.count()) {\n            var o = n.r2 - n.r1 + 1, u = n.g2 - n.g1 + 1, a = t.max([\n                o,\n                u,\n                n.b2 - n.b1 + 1\n            ]);\n            if (1 == n.count()) return [\n                n.copy()\n            ];\n            var i1, c, f, s, h = 0, v = [], l = [];\n            if (a == o) for(i1 = n.r1; i1 <= n.r2; i1++){\n                for(s = 0, c = n.g1; c <= n.g2; c++)for(f = n.b1; f <= n.b2; f++)s += r[e(i1, c, f)] || 0;\n                v[i1] = h += s;\n            }\n            else if (a == u) for(i1 = n.g1; i1 <= n.g2; i1++){\n                for(s = 0, c = n.r1; c <= n.r2; c++)for(f = n.b1; f <= n.b2; f++)s += r[e(c, i1, f)] || 0;\n                v[i1] = h += s;\n            }\n            else for(i1 = n.b1; i1 <= n.b2; i1++){\n                for(s = 0, c = n.r1; c <= n.r2; c++)for(f = n.g1; f <= n.g2; f++)s += r[e(c, f, i1)] || 0;\n                v[i1] = h += s;\n            }\n            return v.forEach(function(t, r) {\n                l[r] = h - t;\n            }), function(t) {\n                var r, o, e, u, a, c = t + \"1\", f = t + \"2\", s = 0;\n                for(i1 = n[c]; i1 <= n[f]; i1++)if (v[i1] > h / 2) {\n                    for(e = n.copy(), u = n.copy(), a = (r = i1 - n[c]) <= (o = n[f] - i1) ? Math.min(n[f] - 1, ~~(i1 + o / 2)) : Math.max(n[c], ~~(i1 - 1 - r / 2)); !v[a];)a++;\n                    for(s = l[a]; !s && v[a - 1];)s = l[--a];\n                    return e[f] = a, u[c] = e[f] + 1, [\n                        e,\n                        u\n                    ];\n                }\n            }(a == o ? \"r\" : a == u ? \"g\" : \"b\");\n        }\n    }\n    return a.prototype = {\n        volume: function(t) {\n            var r = this;\n            return r._volume && !t || (r._volume = (r.r2 - r.r1 + 1) * (r.g2 - r.g1 + 1) * (r.b2 - r.b1 + 1)), r._volume;\n        },\n        count: function(t) {\n            var r = this, n = r.histo;\n            if (!r._count_set || t) {\n                var o, u, a, i1 = 0;\n                for(o = r.r1; o <= r.r2; o++)for(u = r.g1; u <= r.g2; u++)for(a = r.b1; a <= r.b2; a++)i1 += n[e(o, u, a)] || 0;\n                r._count = i1, r._count_set = !0;\n            }\n            return r._count;\n        },\n        copy: function() {\n            var t = this;\n            return new a(t.r1, t.r2, t.g1, t.g2, t.b1, t.b2, t.histo);\n        },\n        avg: function(t) {\n            var n = this, o = n.histo;\n            if (!n._avg || t) {\n                var u, a, i1, c, f = 0, s = 1 << 8 - r, h = 0, v = 0, l = 0;\n                for(a = n.r1; a <= n.r2; a++)for(i1 = n.g1; i1 <= n.g2; i1++)for(c = n.b1; c <= n.b2; c++)f += u = o[e(a, i1, c)] || 0, h += u * (a + .5) * s, v += u * (i1 + .5) * s, l += u * (c + .5) * s;\n                n._avg = f ? [\n                    ~~(h / f),\n                    ~~(v / f),\n                    ~~(l / f)\n                ] : [\n                    ~~(s * (n.r1 + n.r2 + 1) / 2),\n                    ~~(s * (n.g1 + n.g2 + 1) / 2),\n                    ~~(s * (n.b1 + n.b2 + 1) / 2)\n                ];\n            }\n            return n._avg;\n        },\n        contains: function(t) {\n            var r = this, o = t[0] >> n;\n            return gval = t[1] >> n, bval = t[2] >> n, o >= r.r1 && o <= r.r2 && gval >= r.g1 && gval <= r.g2 && bval >= r.b1 && bval <= r.b2;\n        }\n    }, i1.prototype = {\n        push: function(t) {\n            this.vboxes.push({\n                vbox: t,\n                color: t.avg()\n            });\n        },\n        palette: function() {\n            return this.vboxes.map(function(t) {\n                return t.color;\n            });\n        },\n        size: function() {\n            return this.vboxes.size();\n        },\n        map: function(t) {\n            for(var r = this.vboxes, n = 0; n < r.size(); n++)if (r.peek(n).vbox.contains(t)) return r.peek(n).color;\n            return this.nearest(t);\n        },\n        nearest: function(t) {\n            for(var r, n, o, e = this.vboxes, u = 0; u < e.size(); u++)((n = Math.sqrt(Math.pow(t[0] - e.peek(u).color[0], 2) + Math.pow(t[1] - e.peek(u).color[1], 2) + Math.pow(t[2] - e.peek(u).color[2], 2))) < r || void 0 === r) && (r = n, o = e.peek(u).color);\n            return o;\n        },\n        forcebw: function() {\n            var r = this.vboxes;\n            r.sort(function(r, n) {\n                return t.naturalOrder(t.sum(r.color), t.sum(n.color));\n            });\n            var n = r[0].color;\n            n[0] < 5 && n[1] < 5 && n[2] < 5 && (r[0].color = [\n                0,\n                0,\n                0\n            ]);\n            var o = r.length - 1, e = r[o].color;\n            e[0] > 251 && e[1] > 251 && e[2] > 251 && (r[o].color = [\n                255,\n                255,\n                255\n            ]);\n        }\n    }, {\n        quantize: function(f, s) {\n            if (!f.length || s < 2 || s > 256) return !1;\n            var h = function(t) {\n                var o, u = new Array(1 << 3 * r);\n                return t.forEach(function(t) {\n                    o = e(t[0] >> n, t[1] >> n, t[2] >> n), u[o] = (u[o] || 0) + 1;\n                }), u;\n            }(f);\n            h.forEach(function() {});\n            var v = function(t, r) {\n                var o, e, u, i1 = 1e6, c = 0, f = 1e6, s = 0, h = 1e6, v = 0;\n                return t.forEach(function(t) {\n                    (o = t[0] >> n) < i1 ? i1 = o : o > c && (c = o), (e = t[1] >> n) < f ? f = e : e > s && (s = e), (u = t[2] >> n) < h ? h = u : u > v && (v = u);\n                }), new a(i1, c, f, s, h, v, r);\n            }(f, h), l = new u(function(r, n) {\n                return t.naturalOrder(r.count(), n.count());\n            });\n            function g(t, r) {\n                for(var n, e = t.size(), u = 0; u < o;){\n                    if (e >= r) return;\n                    if (u++ > o) return;\n                    if ((n = t.pop()).count()) {\n                        var a = c(h, n), i1 = a[0], f = a[1];\n                        if (!i1) return;\n                        t.push(i1), f && (t.push(f), e++);\n                    } else t.push(n), u++;\n                }\n            }\n            l.push(v), g(l, .75 * s);\n            for(var p = new u(function(r, n) {\n                return t.naturalOrder(r.count() * r.volume(), n.count() * n.volume());\n            }); l.size();)p.push(l.pop());\n            g(p, s);\n            for(var b = new i1; p.size();)b.push(p.pop());\n            return b;\n        }\n    };\n}().quantize, n = function(t) {\n    this.canvas = document.createElement(\"canvas\"), this.context = this.canvas.getContext(\"2d\"), this.width = this.canvas.width = t.naturalWidth, this.height = this.canvas.height = t.naturalHeight, this.context.drawImage(t, 0, 0, this.width, this.height);\n};\nn.prototype.getImageData = function() {\n    return this.context.getImageData(0, 0, this.width, this.height);\n};\nvar o = function() {};\no.prototype.getColor = function(t, r) {\n    return void 0 === r && (r = 10), this.getPalette(t, 5, r)[0];\n}, o.prototype.getPalette = function(t, o, e) {\n    var u = function(t) {\n        var r = t.colorCount, n = t.quality;\n        if (void 0 !== r && Number.isInteger(r)) {\n            if (1 === r) throw new Error(\"colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()\");\n            r = Math.max(r, 2), r = Math.min(r, 20);\n        } else r = 10;\n        return (void 0 === n || !Number.isInteger(n) || n < 1) && (n = 10), {\n            colorCount: r,\n            quality: n\n        };\n    }({\n        colorCount: o,\n        quality: e\n    }), a = new n(t), i1 = function(t, r, n) {\n        for(var o, e, u, a, i1, c = t, f = [], s = 0; s < r; s += n)e = c[0 + (o = 4 * s)], u = c[o + 1], a = c[o + 2], (void 0 === (i1 = c[o + 3]) || i1 >= 125) && (e > 250 && u > 250 && a > 250 || f.push([\n            e,\n            u,\n            a\n        ]));\n        return f;\n    }(a.getImageData().data, a.width * a.height, u.quality), c = r(i1, u.colorCount);\n    return c ? c.palette() : null;\n}, o.prototype.getColorFromUrl = function(t, r, n) {\n    var o = this, e = document.createElement(\"img\");\n    e.addEventListener(\"load\", function() {\n        var u = o.getPalette(e, 5, n);\n        r(u[0], t);\n    }), e.src = t;\n}, o.prototype.getImageData = function(t, r) {\n    var n = new XMLHttpRequest;\n    n.open(\"GET\", t, !0), n.responseType = \"arraybuffer\", n.onload = function() {\n        if (200 == this.status) {\n            var t = new Uint8Array(this.response);\n            i = t.length;\n            for(var n = new Array(i), o = 0; o < t.length; o++)n[o] = String.fromCharCode(t[o]);\n            var e = n.join(\"\"), u = window.btoa(e);\n            r(\"data:image/png;base64,\" + u);\n        }\n    }, n.send();\n}, o.prototype.getColorAsync = function(t, r, n) {\n    var o = this;\n    this.getImageData(t, function(t) {\n        var e = document.createElement(\"img\");\n        e.addEventListener(\"load\", function() {\n            var t = o.getPalette(e, 5, n);\n            r(t[0], this);\n        }), e.src = t;\n    });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/colorthief/dist/color-thief.mjs\n");

/***/ })

};
;